{"version":3,"sources":["components/common/FormsControls/FormsControls.module.css","utils/validators/validators.ts","components/common/FormsControls/FormsControls.tsx","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx"],"names":["module","exports","required","value","maxLengthCreator","maxLength","length","FormControl","input","meta","props","child","hasError","touched","error","className","s","formControl","children","Textarea","restProps","Input","DialogItem","to","id","activeClassName","active","name","Message","message","maxLength100","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","validate","placeholder","mapStateToProps","state","isAuth","auth","compose","connect","messagePage","messagesPage","AddMessage","Component","dialogs","dialogsItems","map","d","messages","m","values","newMessageBody"],"mappings":"uGACAA,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,0C,iCCD3H,oEAAO,IAAMC,EAAW,SAACC,GAErB,IAAIA,EAEJ,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAAuB,SAACF,GAEpD,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,yJCN5BE,EAAc,SAAC,GAAwC,EAAvCC,MAAwC,IAAjCC,EAAgC,EAAhCA,KAAgBC,GAAgB,EAA1BC,MAA0B,yCACnDC,EAAWH,EAAKI,SAAWJ,EAAKK,MAEtC,OACI,sBAAKC,UAAWC,IAAEC,YAAc,KAAOL,GAAYI,IAAEF,OAArD,UACI,8BACKJ,EAAMQ,WAEVN,GAAY,+BAAOH,EAAKK,YAKxBK,EAAW,SAACT,GAAgB,IAC9BF,EAAoCE,EAApCF,MAAuBY,GAAaV,EAA7BD,KAA6BC,EAAvBC,MADgB,YACOD,EADP,2BAEpC,OAAO,cAACH,EAAD,2BAAiBG,GAAjB,aAAwB,oDAAcF,GAAWY,QAG/CC,EAAQ,SAACX,GAAgB,IAC3BF,EAAoCE,EAApCF,MAAuBY,GAAaV,EAA7BD,KAA6BC,EAAvBC,MADa,YACUD,EADV,2BAEjC,OAAO,cAACH,EAAD,2BAAiBG,GAAjB,aAAwB,iDAAWF,GAAWY,S,oBCtBzDpB,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,4B,4FCOjIqB,EAAwC,SAACZ,GAClD,OACI,8BACI,cAAC,IAAD,CAASa,GAAI,YAAcb,EAAMc,GAAIC,gBAAiBT,IAAEU,OAAxD,SAAiEhB,EAAMiB,UCNtEC,EAAsC,SAAClB,GAChD,OACI,8BAAMA,EAAMmB,W,oCCEdC,EAAe1B,YAAiB,KAezB2B,EAAsBC,YAAwB,CAACC,KAAM,wBAA/BD,EAb+B,SAACtB,GAC/D,OACI,uBAAMwB,SAAUxB,EAAMyB,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWlB,IAAUmB,SAAU,CAACpC,IAAU4B,GAAeH,KAAM,iBAAkBY,YAAa,oBAEzG,8BACI,kD,+BCTVC,EAAkB,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,S,YCGZE,sBAA6BC,aANpB,SAACJ,GACrB,MAAO,CACHK,YAAaL,EAAMM,gBAI0C,CAACC,kBDC/D,SAA6BC,GAOhC,OAAOJ,YAAQL,EAARK,EALmB,SAACnC,GAAgC,IAClDgC,EAAwBhC,EAAxBgC,OAAWtB,EADsC,YACzBV,EADyB,YAEtD,OAAIgC,EACG,cAACO,EAAD,eAAe7B,IADH,cAAC,IAAD,CAAUG,GAAI,eCL1BqB,ECCoC,SAAClC,GAMhD,OACI,sBAAKK,UAAWC,IAAEkC,QAAlB,UACI,qBAAKnC,UAAWC,IAAEmC,aAAlB,SAEQzC,EAAMoC,YAAYI,QAAQE,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAuB7B,GAAI6B,EAAE7B,GAAIG,KAAM0B,EAAE1B,MAAxB0B,EAAE7B,SAG9D,sBAAKT,UAAWC,IAAEsC,SAAlB,UAEQ5C,EAAMoC,YAAYQ,SAASF,KAAI,SAAAG,GAAC,OAAI,cAAC,EAAD,CAAoB1B,QAAS0B,EAAE1B,SAAjB0B,EAAE/B,OAExD,cAACO,EAAD,CAAqBG,SAfd,SAACsB,GAChB9C,EAAMsC,WAAWQ,EAAOC","file":"static/js/5.c950d032.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1LhEm\",\"error\":\"FormsControls_error__2f6LL\",\"formSummaryError\":\"FormsControls_formSummaryError__3uso9\"};","export const required = (value: string) => {\r\n\r\n    if (value) return undefined\r\n\r\n    return \"field is required\"\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n\r\n    return undefined\r\n}","import React from \"react\";\r\nimport s from \"./FormsControls.module.css\"\r\n\r\nconst FormControl = ({input, meta, child, ...props}: any) => {\r\n    const hasError = meta.touched && meta.error\r\n\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError && s.error)}>\r\n            <div>\r\n                {props.children}\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__iqg0P\",\"dialogsItems\":\"Dialogs_dialogsItems__1oexO\",\"active\":\"Dialogs_active__28qN5\",\"messages\":\"Dialogs_messages__12RRZ\"};","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from \"../Dialogs.module.css\";\r\n\r\ntype DialogPropsType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport const DialogItem: React.FC<DialogPropsType> = (props: DialogPropsType) => {\r\n    return (\r\n        <div>\r\n            <NavLink to={\"/dialogs/\" + props.id} activeClassName={s.active}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\nexport const Message: React.FC<MessagePropsType> = (props: MessagePropsType) => {\r\n    return (\r\n        <div>{props.message}</div>\r\n    )\r\n}","import {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nexport type formDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength100 = maxLengthCreator(100)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<formDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} validate={[required, maxLength100]} name={\"newMessageBody\"} placeholder={\"Enter message\"}/>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddMessageFormRedux = reduxForm<formDataType>({form: \"dialogAddMessageForm\"})(AddMessageForm)\r\n","import {Redirect} from \"react-router-dom\";\r\nimport React, {ComponentType} from \"react\";\r\nimport {rootStateType} from \"../Redux/reduxStore\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: rootStateType): mapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: mapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if(!isAuth) return <Redirect to={\"login\"}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}","import React from \"react\";\r\nimport {AddMessage} from \"../../Redux/dialogs-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {rootStateType} from \"../../Redux/reduxStore\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nconst mapStateToProps = (state: rootStateType) => {\r\n    return {\r\n        messagePage: state.messagesPage\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, {AddMessage}), withAuthRedirect)(Dialogs)\r\n","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {AddMessageFormRedux, formDataType} from \"./AddMessageForm/AddMessageForm\";\r\n\r\ntype DialogsPropsType = {\r\n    AddMessage: (value: string) => void\r\n    messagePage: {\r\n        dialogs: Array<{ id: number, name: string }>\r\n        messages: Array<{ id: number, message: string }>\r\n        newMessageText: string\r\n    }\r\n}\r\n\r\nexport const Dialogs: React.FC<DialogsPropsType> = (props) => {\r\n\r\n    const addMessage = (values: formDataType) => {\r\n        props.AddMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {\r\n                    props.messagePage.dialogs.map(d => <DialogItem key={d.id} id={d.id} name={d.name}/>)\r\n                }\r\n            </div>\r\n            <div className={s.messages}>\r\n                {\r\n                    props.messagePage.messages.map(m => <Message key={m.id} message={m.message}/>)\r\n                }\r\n                <AddMessageFormRedux onSubmit={addMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}"],"sourceRoot":""}