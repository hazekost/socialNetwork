{"version":3,"sources":["api/api.ts","components/NavBar/NavBar.module.css","redux/auth-reducer.ts","components/Header/Header.module.css","components/Profile/MyPost/MyPost.module.css","hoc/withAuthRedirect.tsx","components/common/AddItemForm.tsx","assets/avatar.jpg","redux/dialogs-reducer.ts","redux/users-reducer.ts","assets/preloader.gif","components/common/Preloader.tsx","components/Profile/MyPost/Post/Post.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","reportWebVitals.ts","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/NavBar/NavBar.tsx","redux/profile-reducer.ts","components/Profile/MyPost/Post/Post.tsx","components/Profile/MyPost/MyPost.tsx","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/ProfileContainer.tsx","hoc/withSuspense.tsx","redux/app-reducer.ts","App.tsx","redux/redux-store.ts","index.tsx"],"names":["instance","axios","create","baseURL","withCredentials","headers","authAPI","authMe","get","logIn","email","password","rememberMe","post","logOut","delete","profileAPI","getProfile","id","getStatus","updateMyStatus","status","put","usersAPI","getUsers","pageSize","page","follow","unFollow","module","exports","SET_AUTH","DEL_AUTH","initialAuthState","login","isAuth","authReducer","state","action","type","data","getAuthTC","dispatch","a","res","resultCode","logout","mapStateToProps","auth","withAuthRedirect","Component","connect","props","restProps","to","AddItemForm","addItem","buttonName","initialValues","text","onSubmit","values","actions","trim","setSubmitting","formik","handleSubmit","onChange","handleChange","value","name","component","placeholder","ADD_MESSAGE","initialState","messages","message","dialogs","dialogsReducer","addMessage","SET_USERS","SET_CURRENT_PAGE","TOGGLE_FETCH","FOLLOW","UNFOLLOW","TOGGLE_FOLLOWING","items","totalCount","error","currentPage","isFetching","followingInProgress","userReducer","map","i","followed","filter","setUsers","setCurrentPage","toggleFetch","toggleFollowing","getUsersTC","changeUsersPageTC","setFollowTC","setUnFollowTC","Preloader","style","width","marginLeft","src","preloader","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Header","className","s","header","loginBlock","onClick","HeaderContainer","this","React","NavBar","nav","item","activeClassName","active","ADD_POST","SET_USER_PROFILE","SET_USER_STATUS","posts","likesCount","userProfile","userStatus","setUserStatus","Post","MyPost","memo","addPost","myPost","p","ProfileStatus","useState","editMode","setEditMode","setStatus","useEffect","autoFocus","e","currentTarget","onBlur","onDoubleClick","ProfileInfo","description","photos","large","avatar","fullName","ProfileContainer","userId","match","params","String","authUserId","getUserProfile","getUserStatus","profile","compose","profilePage","withRouter","withSuspense","fallback","SET_INIT","initialized","DialogsContainer","lazy","UsersContainer","Login","App","initializeAppTC","path","render","app","rootReducer","combineReducers","messagesPage","usersPage","store","createStore","applyMiddleware","thunk","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.82475814.chunk.js","sourcesContent":["import axios, { AxiosResponse } from \"axios\";\r\n\r\nexport type DataType = {\r\n    id: number | null\r\n    login: string | null\r\n    email: string | null\r\n}\r\ntype AuthResponseType = ResponseType<DataType> & { fieldsErrors: Array<string> }\r\ntype ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport type ItemType = {\r\n    id: number\r\n    name: string\r\n    uniqueUrlName: string | null\r\n    photos: { small: string | undefined, large: string | undefined }\r\n    status: string | null\r\n    followed: boolean\r\n}\r\nexport type GetUsersResponseType = {\r\n    items: Array<ItemType>\r\n    totalCount: number\r\n    error: string\r\n}\r\nexport type UserProfileType = {\r\n    aboutMe: string\r\n    contacts: {\r\n        facebook: string\r\n        website: string\r\n        vk: string\r\n        twitter: string\r\n        instagram: string\r\n        youtube: string\r\n        github: string\r\n        mainLink: string\r\n    }\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: number\r\n    photos: { small: string, large: string }\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '6c600c87-cd10-4399-80d8-d0a35356bfb5'\r\n    }\r\n})\r\n\r\nexport const authAPI = {\r\n    authMe() {\r\n        return instance.get<AuthResponseType>(`auth/me`)\r\n    },\r\n    logIn(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post<{}, AxiosResponse<ResponseType<{ userId: number }>>>(`auth/login`, { email, password, rememberMe })\r\n    },\r\n    logOut() {\r\n        return instance.delete<ResponseType>(`auth/login`)\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(id: string) {\r\n        return instance.get<UserProfileType>(`/profile/${id}`)\r\n    },\r\n    getStatus(id: string) {\r\n        return instance.get<string>(`profile/status/${id}`)\r\n    },\r\n    updateMyStatus(status: string) {\r\n        return instance.put<{}, AxiosResponse<ResponseType>>(`profile/status`, { status })\r\n    },\r\n}\r\n\r\nexport const usersAPI = {\r\n    getUsers(pageSize: number, page: number) {\r\n        return instance.get<GetUsersResponseType>(`users?count=${pageSize}&page=${page}`)\r\n    },\r\n    follow(id: number) {\r\n        return instance.post<{}, AxiosResponse<ResponseType>>(`follow/${id}`)\r\n    },\r\n    unFollow(id: number) {\r\n        return instance.delete<ResponseType>(`follow/${id}`)\r\n    },\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"NavBar_nav__2kycN\",\"item\":\"NavBar_item__tJzuk\",\"active\":\"NavBar_active__2nELW\"};","import { Dispatch } from \"redux\"\r\nimport { ThunkAction } from \"redux-thunk\"\r\nimport { authAPI, DataType } from \"../api/api\"\r\nimport { AppRootStateType } from \"./redux-store\"\r\n\r\nconst SET_AUTH = \"auth/SET_AUTH\"\r\nconst DEL_AUTH = \"auth/DEL_AUTH\"\r\n\r\nexport type AuthStateType = {\r\n    id: number | null\r\n    login: string | null\r\n    email: string | null\r\n    isAuth: boolean\r\n}\r\ntype AuthActionTypes = ReturnType<typeof setAuth> | ReturnType<typeof delAuth>\r\n\r\nconst initialAuthState: AuthStateType = {\r\n    id: null,\r\n    login: null,\r\n    email: null,\r\n    isAuth: false,\r\n}\r\n\r\nexport const authReducer = (state: AuthStateType = initialAuthState, action: AuthActionTypes): AuthStateType => {\r\n    switch (action.type) {\r\n        case SET_AUTH:\r\n            return { ...state, ...action.data, isAuth: true }\r\n        case DEL_AUTH:\r\n            return { ...state, ...action.data, isAuth: false }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst setAuth = (data: DataType) => ({ type: SET_AUTH, data })\r\nconst delAuth = (data: DataType) => ({ type: DEL_AUTH, data })\r\n\r\nexport const getAuthTC = () => async (dispatch: Dispatch<AuthActionTypes>) => {\r\n    let res = await authAPI.authMe();\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(setAuth(res.data.data))\r\n    }\r\n}\r\nexport const login = (email: string, password: string, rememberMe: boolean): ThunkAction<void, AppRootStateType, unknown, AuthActionTypes> =>\r\n    async (dispatch) => {\r\n        let res = await authAPI.logIn(email, password, rememberMe);\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(getAuthTC())\r\n        }\r\n    }\r\nexport const logout = () => async (dispatch: Dispatch<AuthActionTypes>) => {\r\n    let res = await authAPI.logOut()\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(delAuth({ id: null, email: null, login: null }))\r\n    }\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1GOQp\",\"loginBlock\":\"Header_loginBlock__3Dydc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPost\":\"MyPost_myPost__1SoAL\",\"posts\":\"MyPost_posts__2WlAZ\"};","import { ComponentType } from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { Redirect } from \"react-router\"\r\nimport { AppRootStateType } from \"../redux/redux-store\"\r\n\r\ntype RedirectComponentPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): RedirectComponentPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    function RedirectComponent(props: RedirectComponentPropsType) {\r\n        let { isAuth, ...restProps } = props\r\n        if (!isAuth) return <Redirect to={\"/login\"} />\r\n        return <Component {...restProps as T} />\r\n    }\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n\r\n}","import { Field, Form, Formik } from \"formik\";\r\n\r\ntype AddItemFormPropsType = {\r\n    buttonName: string\r\n    addItem: (text: string) => void\r\n}\r\n\r\nexport const AddItemForm: React.FC<AddItemFormPropsType> = (props) => {\r\n\r\n    const { addItem, buttonName } = props\r\n\r\n    return <Formik\r\n        initialValues={{ text: '' }}\r\n        onSubmit={(values, actions) => {\r\n            if (values.text.trim() !== \"\") {\r\n                addItem(values.text)\r\n            }\r\n            values.text = \"\"\r\n            actions.setSubmitting(false);\r\n        }}>\r\n        {formik => (\r\n            <Form onSubmit={formik.handleSubmit}>\r\n                <Field onChange={formik.handleChange} value={formik.values.text} name=\"text\"\r\n                    component=\"textarea\" placeholder=\"Enter your text\" />\r\n                <div>\r\n                    <button type=\"submit\">{buttonName}</button>\r\n                </div>\r\n            </Form>\r\n        )}\r\n    </Formik>\r\n}","export default __webpack_public_path__ + \"static/media/avatar.3911aaec.jpg\";","const ADD_MESSAGE = \"dialogs/ADD_MESSAGE\"\r\n\r\ntype DialogType = {\r\n    name: string\r\n    id: number\r\n}\r\ntype MessageType = {\r\n    message: string\r\n    id: number\r\n}\r\nexport type MessagesPageType = {\r\n    messages: Array<MessageType>\r\n    dialogs: Array<DialogType>\r\n}\r\ntype ActionType = ReturnType<typeof addMessage>\r\n\r\nlet initialState = {\r\n    messages: [\r\n        { message: \"Hi\", id: 1 },\r\n        { message: \"How are u\", id: 2 },\r\n        { message: \"Sup\", id: 3 }\r\n    ],\r\n    dialogs: [\r\n        { name: \"Dimych\", id: 1 },\r\n        { name: \"Valera\", id: 2 },\r\n        { name: \"Vika\", id: 3 },\r\n        { name: \"Sveta\", id: 4 },\r\n        { name: \"Andrey\", id: 5 },\r\n    ],\r\n}\r\n\r\nexport const dialogsReducer = (state: MessagesPageType = initialState, action: ActionType): MessagesPageType => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE:\r\n            return { ...state, messages: [...state.messages, { message: action.message, id: 4 }] }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addMessage = (message: string) => ({ type: ADD_MESSAGE, message })","import { Dispatch } from \"redux\"\r\nimport { GetUsersResponseType, ItemType, usersAPI } from \"../api/api\"\r\n\r\nconst SET_USERS = \"users/SET_USERS\";\r\nconst SET_CURRENT_PAGE = \"users/SET_CURRENT_PAGE\";\r\nconst TOGGLE_FETCH = \"users/TOGGLE_FETCH\";\r\nconst FOLLOW = \"users/FOLLOW\";\r\nconst UNFOLLOW = \"users/UNFOLLOW\";\r\nconst TOGGLE_FOLLOWING = \"users/TOGGLE_FOLLOWING\";\r\n\r\nexport type UsersStateType = {\r\n    items: Array<ItemType>\r\n    totalCount: number\r\n    error: string\r\n    pageSize: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\ntype ActionType = ReturnType<typeof follow> | ReturnType<typeof unFollow> | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage> | ReturnType<typeof toggleFetch> | ReturnType<typeof toggleFollowing>\r\n\r\n\r\nlet initialState: UsersStateType = {\r\n    items: [],\r\n    totalCount: 0,\r\n    error: \"\",\r\n    pageSize: 10,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [],\r\n}\r\n\r\nexport const userReducer = (state: UsersStateType = initialState, action: ActionType): UsersStateType => {\r\n    switch (action.type) {\r\n        case SET_USERS:\r\n            return { ...state, ...action.data }\r\n        case SET_CURRENT_PAGE:\r\n            return { ...state, currentPage: action.page }\r\n        case TOGGLE_FETCH:\r\n            return { ...state, isFetching: action.isFetching }\r\n        case FOLLOW:\r\n            return { ...state, items: state.items.map(i => i.id === action.id ? { ...i, followed: true } : i) }\r\n        case UNFOLLOW:\r\n            return { ...state, items: state.items.map(i => i.id === action.id ? { ...i, followed: false } : i) }\r\n        case TOGGLE_FOLLOWING:\r\n            return {\r\n                ...state, followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.id]\r\n                    : state.followingInProgress.filter(id => id !== action.id)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst follow = (id: number) => ({ type: FOLLOW, id } as const)\r\nconst unFollow = (id: number) => ({ type: UNFOLLOW, id } as const)\r\nconst setUsers = (data: GetUsersResponseType) => ({ type: SET_USERS, data } as const)\r\nconst setCurrentPage = (page: number) => ({ type: SET_CURRENT_PAGE, page } as const)\r\nconst toggleFetch = (isFetching: boolean) => ({ type: TOGGLE_FETCH, isFetching } as const)\r\nconst toggleFollowing = (id: number, isFetching: boolean) => ({ type: TOGGLE_FOLLOWING, id, isFetching } as const)\r\n\r\nexport const getUsersTC = (pageSize: number, currentPage: number) => async (dispatch: Dispatch<ActionType>) => {\r\n    dispatch(toggleFetch(true))\r\n    let res = await usersAPI.getUsers(pageSize, currentPage)\r\n    dispatch(setUsers(res.data))\r\n    dispatch(toggleFetch(false))\r\n}\r\nexport const changeUsersPageTC = (pageSize: number, page: number) => async (dispatch: Dispatch<ActionType>) => {\r\n    dispatch(toggleFetch(true))\r\n    dispatch(setCurrentPage(page))\r\n    let res = await usersAPI.getUsers(pageSize, page)\r\n    dispatch(setUsers(res.data))\r\n    dispatch(toggleFetch(false))\r\n}\r\nexport const setFollowTC = (id: number) => async (dispatch: Dispatch<ActionType>) => {\r\n    dispatch(toggleFollowing(id, true))\r\n    let res = await usersAPI.follow(id)\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(follow(id))\r\n    }\r\n    dispatch(toggleFollowing(id, false))\r\n}\r\nexport const setUnFollowTC = (id: number) => async (dispatch: Dispatch<ActionType>) => {\r\n    dispatch(toggleFollowing(id, true))\r\n    let res = await usersAPI.unFollow(id)\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(unFollow(id))\r\n    }\r\n    dispatch(toggleFollowing(id, false))\r\n}","export default __webpack_public_path__ + \"static/media/preloader.07a3b34f.gif\";","import preloader from \"../../assets/preloader.gif\"\r\n\r\nexport const Preloader = () => {\r\n    return <img style={{ width: \"100px\", marginLeft: \"40%\" }} src={preloader} alt=\"\" />\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__1nWDH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"ProfileInfo_description__30zCW\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { NavLink } from \"react-router-dom\"\r\nimport s from \"./Header.module.css\"\r\n\r\ntype HeaderPropsType = {\r\n    login: string | null\r\n    isAuth: boolean\r\n    logout: () => void\r\n}\r\n\r\nexport function Header(props: HeaderPropsType) {\r\n    return <header className={s.header}>\r\n        <img src=\"https://coollogo.net/wp-content/uploads/2021/03/React-logo.svg\" alt=\"\" />\r\n        <div className={s.loginBlock}>\r\n            {props.isAuth\r\n                ? <div>\r\n                    {props.login} - <button onClick={props.logout}>Log Out</button>\r\n                </div>\r\n                : <NavLink to={\"/login\"}>Login</NavLink>}\r\n        </div>\r\n    </header>\r\n}","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { logout } from \"../../redux/auth-reducer\";\r\nimport { AppRootStateType } from \"../../redux/redux-store\";\r\nimport { Header } from \"./Header\";\r\n\r\ntype HeaderContainerPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n    logout: () => void\r\n}\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerPropsType> {\r\n\r\n    logout = () => {\r\n        this.props.logout()\r\n    }\r\n\r\n    render() {\r\n        let { login, isAuth } = this.props\r\n        return <Header isAuth={isAuth} login={login} logout={this.logout} />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n})\r\n\r\nexport default connect(mapStateToProps, { logout })(HeaderContainer)","import { NavLink } from \"react-router-dom\"\r\nimport s from \"./NavBar.module.css\"\r\n\r\nexport const NavBar = () => {\r\n    return <nav className={s.nav}>\r\n        <div className={s.item}><NavLink to=\"/profile\" activeClassName={s.active}>Profile</NavLink></div>\r\n        <div className={s.item}><NavLink to=\"/messages\" activeClassName={s.active}>Mesages</NavLink></div>\r\n        <div className={s.item}><NavLink to=\"/users\" activeClassName={s.active}>Users</NavLink></div>\r\n    </nav>\r\n}","import { Dispatch } from \"redux\"\r\nimport { profileAPI, UserProfileType } from \"../api/api\"\r\n\r\nconst ADD_POST = \"profile/ADD_POST\"\r\nconst SET_USER_PROFILE = \"profile/SET_USER_PROFILE\"\r\nconst SET_USER_STATUS = \"profile/SET_USER_STATUS\"\r\n\r\ntype PostType = {\r\n    post: string\r\n    id: number\r\n    likesCount: number\r\n}\r\nexport type ProfilePageType = {\r\n    posts: Array<PostType>\r\n    userProfile: UserProfileType | null\r\n    userStatus: string\r\n}\r\n\r\ntype ActionType = ReturnType<typeof addPost> | ReturnType<typeof setUserProfile> | ReturnType<typeof setUserStatus>\r\n\r\nlet initialState: ProfilePageType = {\r\n    posts: [\r\n        { post: \"Hi, how are you\", id: 1, likesCount: 21 },\r\n        { post: \"How your it-kamasutra\", id: 2, likesCount: 15 }\r\n    ],\r\n    userProfile: null,\r\n    userStatus: \"\",\r\n}\r\n\r\nexport const profileReducer = (state: ProfilePageType = initialState, action: ActionType): ProfilePageType => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            return { ...state, posts: [...state.posts, { id: 4, post: action.text, likesCount: 0 }] }\r\n        case SET_USER_PROFILE:\r\n            return { ...state, userProfile: action.profile }\r\n        case SET_USER_STATUS:\r\n            return { ...state, userStatus: action.status }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addPost = (text: string) => ({ type: ADD_POST, text } as const)\r\nconst setUserProfile = (profile: UserProfileType) => ({ type: SET_USER_PROFILE, profile } as const)\r\nconst setUserStatus = (status: string) => ({ type: SET_USER_STATUS, status } as const)\r\n\r\nexport const getUserProfile = (id: string) => async (dispatch: Dispatch) => {\r\n    let res = await profileAPI.getProfile(id)\r\n    dispatch(setUserProfile(res.data))\r\n}\r\nexport const getUserStatus = (id: string) => async (dispatch: Dispatch) => {\r\n    let res = await profileAPI.getStatus(id)\r\n    dispatch(setUserStatus(res.data))\r\n}\r\nexport const updateMyStatus = (status: string) => async (dispatch: Dispatch) => {\r\n    let res = await profileAPI.updateMyStatus(status)\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(setUserStatus(status))\r\n    }\r\n}","import s from \"./Post.module.css\"\r\n\r\ntype PostType = {\r\n    value: string\r\n    likesCount: number\r\n}\r\n\r\nexport function Post(props: PostType) {\r\n    return <div className={s.post}>\r\n        <img src=\"https://icon-library.com/images/avatar-icon-png/avatar-icon-png-15.jpg\" alt=\"\" />\r\n        {props.value}\r\n        <div>\r\n            <span>Like: {props.likesCount}</span>\r\n        </div>\r\n    </div>\r\n}","import { Post } from \"./Post/Post\";\r\nimport s from \"./MyPost.module.css\"\r\nimport React from \"react\";\r\nimport { ProfilePageType } from \"../../../redux/profile-reducer\";\r\nimport { AddItemForm } from \"../../common/AddItemForm\";\r\n\r\ntype MyPostPropsType = {\r\n    state: ProfilePageType\r\n    addPost: (value: string) => void\r\n}\r\n\r\nexport const MyPost: React.FC<MyPostPropsType> = React.memo((props) => {\r\n\r\n    const { state, addPost } = props\r\n\r\n    return <div className={s.myPost}>\r\n        <AddItemForm addItem={addPost} buttonName={\"Add post\"} />\r\n        <div className={s.posts}>\r\n            {\r\n                state.posts.map(p => <Post key={p.id} value={p.post} likesCount={p.likesCount} />)\r\n            }\r\n        </div>\r\n    </div>\r\n})","import React from \"react\"\r\nimport { useEffect, useState } from \"react\"\r\nimport { ChangeEvent } from \"react\"\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateMyStatus: (status: string) => void\r\n}\r\n\r\n// export class ProfileStatus extends React.Component<ProfileStatusPropsType> {\r\n\r\n//     state = {\r\n//         editMode: false,\r\n//         status: this.props.status\r\n//     }\r\n\r\n//     activateEditMode = () => {\r\n//         this.setState({ editMode: true })\r\n//     }\r\n\r\n//     deActivateEditMode = () => {\r\n//         this.setState({ editMode: false })\r\n//         this.props.updateMyStatus(this.state.status)\r\n//     }\r\n\r\n//     setStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n//         this.setState({ status: e.currentTarget.value })\r\n//     }\r\n\r\n//     componentDidUpdate(prevProps: ProfileStatusPropsType) {\r\n//         if (prevProps.status !== this.props.status) {\r\n//             this.setState({\r\n//                 status: this.props.status\r\n//             })\r\n//         }\r\n//     }\r\n\r\n//     render() {\r\n//         return <>\r\n//             {\r\n//                 this.state.editMode\r\n//                     ? <div  >\r\n//                         <input autoFocus onChange={this.setStatus}\r\n//                             onBlur={this.deActivateEditMode} value={this.state.status} />\r\n//                     </div>\r\n//                     : <div onDoubleClick={this.activateEditMode}>\r\n//                         {this.props.status}\r\n//                     </div>\r\n//             }\r\n//         </>\r\n//     }\r\n// }\r\n\r\nexport const ProfileStatus: React.FC<ProfileStatusPropsType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deActivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateMyStatus(status)\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return <>\r\n        {\r\n            editMode\r\n                ? <div  >\r\n                    <input autoFocus onChange={onChangeHandler}\r\n                        onBlur={deActivateEditMode} value={status} />\r\n                </div>\r\n                : <div onDoubleClick={activateEditMode}>\r\n                    {props.status}\r\n                </div>\r\n        }\r\n    </>\r\n}","import s from \"./ProfileInfo.module.css\"\r\nimport avatar from \"../../../assets/avatar.jpg\"\r\nimport { UserProfileType } from \"../../../api/api\"\r\nimport { ProfileStatus } from \"./ProfileStatus\"\r\n\r\ntype ProfileInfoPropsType = {\r\n    userProfile: UserProfileType | null\r\n    userStatus: string\r\n    updateMyStatus: (status: string) => void\r\n}\r\n\r\nexport function ProfileInfo(props: ProfileInfoPropsType) {\r\n    return <div className={s.description}>\r\n        <img src={props.userProfile?.photos.large ? props.userProfile.photos.large : avatar} alt=\"\" />\r\n        <span>{props.userProfile?.fullName}</span>\r\n        <ProfileStatus status={props.userStatus} updateMyStatus={props.updateMyStatus} />\r\n    </div>\r\n}","import React from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { RouteComponentProps, withRouter } from \"react-router\"\r\nimport { compose } from \"redux\"\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\"\r\nimport { addPost, getUserProfile, getUserStatus, ProfilePageType, updateMyStatus } from \"../../redux/profile-reducer\"\r\nimport { AppRootStateType } from \"../../redux/redux-store\"\r\nimport { MyPost } from \"./MyPost/MyPost\"\r\nimport s from \"./ProfileContainer.module.css\"\r\nimport { ProfileInfo } from \"./ProfileInfo/ProfileInfo\"\r\n\r\ntype ProfilePropsType = {\r\n    state: ProfilePageType\r\n    authUserId: number | null\r\n    addPost: (value: string) => void\r\n    getUserProfile: (id: string) => void\r\n    getUserStatus: (id: string) => void\r\n    updateMyStatus: (status: string) => void\r\n}\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = String(this.props.authUserId)\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        let { userProfile, userStatus } = this.props.state\r\n\r\n        return <div className={s.profile}>\r\n            <ProfileInfo userProfile={userProfile} userStatus={userStatus} updateMyStatus={this.props.updateMyStatus} />\r\n            <MyPost state={this.props.state} addPost={this.props.addPost} />\r\n        </div>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): { state: ProfilePageType, authUserId: number | null } => ({\r\n    state: state.profilePage,\r\n    authUserId: state.auth.id\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, { addPost, getUserProfile, getUserStatus, updateMyStatus }),\r\n    withRouter, withAuthRedirect)(ProfileContainer)","import { ComponentType, Suspense } from \"react\"\r\n\r\nexport function withSuspense<T>(Component: ComponentType<T>) {\r\n    return (props: any) => {\r\n        return <Suspense fallback={\"...Loading\"}>\r\n            <Component {...props} />\r\n        </Suspense>\r\n    }\r\n}","import { ThunkAction } from \"redux-thunk\"\r\nimport { getAuthTC } from \"./auth-reducer\"\r\nimport { AppRootStateType } from \"./redux-store\"\r\n\r\n\r\nconst SET_INIT = \"app/SET_INIT\"\r\n\r\nexport type AuthStateType = {\r\n    initialized: boolean\r\n}\r\ntype AuthActionTypes = ReturnType<typeof initializedSeccess>\r\n\r\nconst initialAuthState: AuthStateType = {\r\n    initialized: false\r\n}\r\n\r\nexport const appReducer = (state: AuthStateType = initialAuthState, action: AuthActionTypes): AuthStateType => {\r\n    switch (action.type) {\r\n        case SET_INIT:\r\n            return { ...state, initialized: true }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst initializedSeccess = () => ({ type: SET_INIT })\r\n\r\nexport const initializeAppTC = (): ThunkAction<void, AppRootStateType, unknown, AuthActionTypes> => (dispatch) => {\r\n    let promise = dispatch(getAuthTC())\r\n    promise.then(() => {\r\n        dispatch(initializedSeccess())\r\n    })\r\n}\r\n","import React, { Suspense } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport { Preloader } from \"./components/common/Preloader\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport { NavBar } from \"./components/NavBar/NavBar\";\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\nimport { withSuspense } from \"./hoc/withSuspense\";\nimport { initializeAppTC } from \"./redux/app-reducer\";\nimport { AppRootStateType } from \"./redux/redux-store\";\n\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\nconst UsersContainer = React.lazy(() => import('./components/Users/UsersContainer'));\nconst Login = React.lazy(() => import('./components/Login/Login'));\n\ntype AppPropsType = {\n  initialized: boolean\n  initializeAppTC: () => void\n}\n\nclass App extends React.Component<AppPropsType> {\n\n  componentDidMount() {\n    this.props.initializeAppTC()\n  }\n\n  render() {\n    if (!this.props.initialized) return <Preloader />\n    return (\n      <div className=\"app-wrapper\">\n        <HeaderContainer />\n        <NavBar />\n        <div className=\"content\">\n          <Route path=\"/messages\" render={() => {\n            return <Suspense fallback={\"...Loading\"}>\n              <DialogsContainer />\n            </Suspense>\n          }} />\n          <Route path=\"/profile/:userId?\" render={() => <ProfileContainer />} />\n          <Route path=\"/users\" render={withSuspense(UsersContainer)} />\n          <Route path=\"/login\" render={withSuspense(Login)} />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: AppRootStateType) => ({\n  initialized: state.app.initialized\n})\n\nexport default connect(mapStateToProps, { initializeAppTC })(App)","import { combineReducers, createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { appReducer } from \"./app-reducer\";\r\nimport { authReducer } from \"./auth-reducer\";\r\nimport { dialogsReducer } from \"./dialogs-reducer\";\r\nimport { profileReducer } from \"./profile-reducer\";\r\nimport { userReducer } from \"./users-reducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    messagesPage: dialogsReducer,\r\n    profilePage: profileReducer,\r\n    usersPage: userReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n})\r\n\r\nexport let store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\nexport type DispatchType = typeof store.dispatch\r\n\r\n//@ts-ignore\r\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\nimport App from './App';\nimport { HashRouter } from 'react-router-dom';\nimport { store } from './redux/redux-store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Provider store={store}>\n                <App />\n            </Provider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// rerenderEntireTree()\n// store.subscribe(() => rerenderEntireTree())\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}