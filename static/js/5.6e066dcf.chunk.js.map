{"version":3,"sources":["components/Login/Login.module.css","components/Login/Login.tsx"],"names":["module","exports","validateEmail","value","error","test","validatePassword","length","LoginForm","props","initialValues","email","password","rememberMe","onSubmit","values","actions","login","setSubmitting","formik","handleSubmit","id","name","type","placeholder","validate","onChange","handleChange","render","em","className","s","errorMessage","autoComplete","checked","disabled","connect","state","isAuth","auth","to"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,aAAe,8B,iCCD9D,0EAQA,SAASC,EAAcC,GACnB,IAAIC,EAMJ,OALKD,EAEO,4CAA4CE,KAAKF,KACzDC,EAAQ,yBAFRA,EAAQ,iBAILA,EAEX,SAASE,EAAiBH,GACtB,IAAIC,EAMJ,OALKD,EAEMA,EAAMI,OAAS,IACtBH,EAAQ,kBAFRA,EAAQ,oBAILA,EAOX,IAAMI,EAA0C,SAACC,GAC7C,OAAO,cAAC,IAAD,CACHC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVC,YAAY,GAEhBC,SAAU,SAACC,EAAQC,GACfP,EAAMQ,MAAMF,EAAOJ,MAAOI,EAAOH,SAAUG,EAAOF,YAClDG,EAAQE,eAAc,IARvB,SAWF,SAAAC,GAAM,OACH,eAAC,IAAD,CAAML,SAAUK,EAAOC,aAAvB,UACI,gCACI,cAAC,IAAD,CAAOC,GAAG,QAAQC,KAAK,QAAQC,KAAK,QAAQC,YAAY,QACpDC,SAAUvB,EAAewB,SAAUP,EAAOQ,aAAcxB,MAAOgB,EAAOJ,OAAOJ,QACjF,cAAC,IAAD,CAAcW,KAAK,QAAQM,OAAQ,SAACC,GAAD,OAAQ,uBAAMC,UAAWC,IAAEC,aAAnB,cAAoCH,WAEnF,gCACI,cAAC,IAAD,CAAOR,GAAG,WAAWC,KAAK,WAAWC,KAAK,WAAWU,aAAa,KAC9DT,YAAY,WAAWC,SAAUnB,EAAkBoB,SAAUP,EAAOQ,aAAcxB,MAAOgB,EAAOJ,OAAOH,WAC3G,cAAC,IAAD,CAAcU,KAAK,WAAWM,OAAQ,SAACC,GAAD,OAAQ,uBAAMC,UAAWC,IAAEC,aAAnB,cAAmCH,WAErF,gCACI,cAAC,IAAD,CAAOR,GAAG,aAAaC,KAAK,aAAaC,KAAK,WAC1CG,SAAUP,EAAOQ,aAAcO,QAASf,EAAOJ,OAAOF,aAF9D,iBAKA,8BACI,wBAAQU,KAAK,SAASY,UAAU,EAAhC,6BA8BLC,uBAJS,SAACC,GAAD,MAA8B,CAClDC,OAAQD,EAAME,KAAKD,UAGiB,CAAErB,WAA3BmB,EAlByB,SAAC3B,GAMrC,OAAIA,EAAM6B,OAAe,cAAC,IAAD,CAAUE,GAAI,aAEhC,gCACH,uCACA,cAAChC,EAAD,CAAWS,MARD,SAACN,EAAeC,EAAkBC,GAC5CJ,EAAMQ,MAAMN,EAAOC,EAAUC","file":"static/js/5.6e066dcf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Login_error__1cNGo\",\"errorMessage\":\"Login_errorMessage__1zRxZ\"};","import { ErrorMessage, Field, Form, Formik } from \"formik\";\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router\";\r\nimport { login } from \"../../redux/auth-reducer\";\r\nimport { AppRootStateType } from \"../../redux/redux-store\";\r\nimport s from \"./Login.module.css\"\r\n\r\nfunction validateEmail(value: string) {\r\n    let error;\r\n    if (!value) {\r\n        error = 'Email required';\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\r\n        error = 'Invalid email address';\r\n    }\r\n    return error;\r\n}\r\nfunction validatePassword(value: string) {\r\n    let error;\r\n    if (!value) {\r\n        error = 'Password required';\r\n    } else if (value.length < 6) {\r\n        error = 'Short password';\r\n    }\r\n    return error;\r\n}\r\n\r\ntype LoginFormPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean) => void\r\n}\r\n\r\nconst LoginForm: React.FC<LoginFormPropsType> = (props) => {\r\n    return <Formik\r\n        initialValues={{\r\n            email: \"\",\r\n            password: \"\",\r\n            rememberMe: false,\r\n        }}\r\n        onSubmit={(values, actions) => {\r\n            props.login(values.email, values.password, values.rememberMe)\r\n            actions.setSubmitting(false);\r\n            return;\r\n        }}>\r\n        {formik => (\r\n            <Form onSubmit={formik.handleSubmit}>\r\n                <div>\r\n                    <Field id=\"email\" name=\"email\" type=\"email\" placeholder=\"Email\"\r\n                        validate={validateEmail} onChange={formik.handleChange} value={formik.values.email} />\r\n                    <ErrorMessage name=\"email\" render={(em) => <span className={s.errorMessage} > {em}</span>} />\r\n                </div>\r\n                <div>\r\n                    <Field id=\"password\" name=\"password\" type=\"password\" autoComplete=\"on\"\r\n                        placeholder=\"Password\" validate={validatePassword} onChange={formik.handleChange} value={formik.values.password} />\r\n                    <ErrorMessage name=\"password\" render={(em) => <span className={s.errorMessage}> {em}</span>} />\r\n                </div>\r\n                <div>\r\n                    <Field id=\"rememberMe\" name=\"rememberMe\" type=\"checkbox\"\r\n                        onChange={formik.handleChange} checked={formik.values.rememberMe} />\r\n                    Remember me\r\n                </div>\r\n                <div>\r\n                    <button type=\"submit\" disabled={false} >Submit</button>\r\n                </div>\r\n            </Form>\r\n        )}\r\n    </Formik>\r\n}\r\n\r\ntype LoginPropsType = {\r\n    isAuth: boolean\r\n    login: (email: string, password: string, rememberMe: boolean) => void\r\n}\r\n\r\nconst Login: React.FC<LoginPropsType> = (props) => {\r\n\r\n    const login = (email: string, password: string, rememberMe: boolean) => {\r\n        props.login(email, password, rememberMe)\r\n    }\r\n\r\n    if (props.isAuth) return <Redirect to={\"/profile\"} />\r\n\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginForm login={login} />\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, { login })(Login)"],"sourceRoot":""}