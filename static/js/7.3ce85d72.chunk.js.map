{"version":3,"sources":["components/common/FormsControls/FormsControls.module.css","utils/validators/validators.ts","components/common/FormsControls/FormsControls.tsx","components/Login/Login.tsx"],"names":["module","exports","required","value","maxLengthCreator","maxLength","length","FormControl","input","meta","props","child","hasError","touched","error","className","s","formControl","children","Textarea","restProps","Input","ReduxLoginForm","reduxForm","form","handleSubmit","onSubmit","placeholder","validate","name","component","type","formSummaryError","connect","state","isAuth","auth","login","loginTC","to","formData","email","password","rememberMe"],"mappings":"uGACAA,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,0C,iCCD3H,oEAAO,IAAMC,EAAW,SAACC,GAErB,IAAIA,EAEJ,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAAuB,SAACF,GAEpD,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,yJCN5BE,EAAc,SAAC,GAAwC,EAAvCC,MAAwC,IAAjCC,EAAgC,EAAhCA,KAAgBC,GAAgB,EAA1BC,MAA0B,yCACnDC,EAAWH,EAAKI,SAAWJ,EAAKK,MAEtC,OACI,sBAAKC,UAAWC,IAAEC,YAAc,KAAOL,GAAYI,IAAEF,OAArD,UACI,8BACKJ,EAAMQ,WAEVN,GAAY,+BAAOH,EAAKK,YAKxBK,EAAW,SAACT,GAAgB,IAC9BF,EAAoCE,EAApCF,MAAuBY,GAAaV,EAA7BD,KAA6BC,EAAvBC,MADgB,YACOD,EADP,2BAEpC,OAAO,cAACH,EAAD,2BAAiBG,GAAjB,aAAwB,oDAAcF,GAAWY,QAG/CC,EAAQ,SAACX,GAAgB,IAC3BF,EAAoCE,EAApCF,MAAuBY,GAAaV,EAA7BD,KAA6BC,EAAvBC,MADa,YACUD,EADV,2BAEjC,OAAO,cAACH,EAAD,2BAAiBG,GAAjB,aAAwB,iDAAWF,GAAWY,S,uICgBnDE,EAAiBC,YAAwB,CAACC,KAAM,SAA/BD,EAvBsC,SAAC,GAA2B,IAA1BE,EAAyB,EAAzBA,aAAcX,EAAW,EAAXA,MACzE,OACI,uBAAMY,SAAUD,EAAhB,UACI,8BACI,cAAC,IAAD,CAAOE,YAAa,QAASC,SAAU,CAAC1B,KAAW2B,KAAM,QAASC,UAAWT,QAEjF,8BACI,cAAC,IAAD,CAAOM,YAAa,WAAYC,SAAU,CAAC1B,KAAW6B,KAAM,WAAYF,KAAM,WACvEC,UAAWT,QAEtB,gCACI,cAAC,IAAD,CAAOS,UAAW,QAASD,KAAM,aAAcE,KAAM,aADzD,kBAGCjB,GAAS,qBAAKC,UAAWC,IAAEgB,iBAAlB,SACLlB,IAEL,8BACI,mDAsCDmB,uBANS,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,UAIa,CAACE,MAAOC,KAAjCL,EAzByB,SAAC,GAAqB,IAApBE,EAAmB,EAAnBA,OAAQE,EAAW,EAAXA,MAO9C,OAAIF,EACO,cAAC,IAAD,CAAUI,GAAI,aAIrB,gCACI,uCACA,cAACjB,EAAD,CAAgBI,SAZP,SAACc,GAA4B,IACrCC,EAA+BD,EAA/BC,MAAOC,EAAwBF,EAAxBE,SAAUC,EAAcH,EAAdG,WACtBN,EAAMI,EAAOC,EAAUC","file":"static/js/7.3ce85d72.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1LhEm\",\"error\":\"FormsControls_error__2f6LL\",\"formSummaryError\":\"FormsControls_formSummaryError__3uso9\"};","export const required = (value: string) => {\r\n\r\n    if (value) return undefined\r\n\r\n    return \"field is required\"\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n\r\n    return undefined\r\n}","import React from \"react\";\r\nimport s from \"./FormsControls.module.css\"\r\n\r\nconst FormControl = ({input, meta, child, ...props}: any) => {\r\n    const hasError = meta.touched && meta.error\r\n\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError && s.error)}>\r\n            <div>\r\n                {props.children}\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\"\r\nimport {Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {loginTC} from \"../../Redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {rootStateType} from \"../../Redux/reduxStore\";\r\nimport s from \"../common/FormsControls/FormsControls.module.css\"\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = ({handleSubmit, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field placeholder={\"Login\"} validate={[required]} name={\"email\"} component={Input}/>\r\n            </div>\r\n            <div>\r\n                <Field placeholder={\"Password\"} validate={[required]} type={\"password\"} name={\"password\"}\r\n                       component={Input}/>\r\n            </div>\r\n            <div>\r\n                <Field component={\"input\"} name={\"rememberMe\"} type={\"checkbox\"}/> remember me\r\n            </div>\r\n            {error && <div className={s.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>LogIn</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ReduxLoginForm = reduxForm<FormDataType>({form: \"Login\"})(LoginForm)\r\n\r\ntype LoginPropsType = {\r\n    isAuth: boolean\r\n    login: (email: string, password: string, rememberMe: boolean) => void\r\n}\r\n\r\nconst Login: React.FC<LoginPropsType> = ({isAuth, login}) => {\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        let {email, password, rememberMe} = formData\r\n        login(email, password, rememberMe)\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <ReduxLoginForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: rootStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {login: loginTC})(Login)\r\n"],"sourceRoot":""}